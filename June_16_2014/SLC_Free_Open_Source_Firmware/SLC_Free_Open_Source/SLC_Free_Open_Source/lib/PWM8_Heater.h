//*****************************************************************************
//*****************************************************************************
//  FILENAME: PWM8_Heater.h
//   Version: 2.60, Updated on 2012/9/21 at 11:59:18
//  Generated by PSoC Designer 5.3.2710
//
//  DESCRIPTION: PWM8 User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef PWM8_Heater_INCLUDE
#define PWM8_Heater_INCLUDE

#include <m8c.h>

#pragma fastcall16 PWM8_Heater_EnableInt
#pragma fastcall16 PWM8_Heater_DisableInt
#pragma fastcall16 PWM8_Heater_Start
#pragma fastcall16 PWM8_Heater_Stop
#pragma fastcall16 PWM8_Heater_bReadCounter              // Read  DR0
#pragma fastcall16 PWM8_Heater_WritePeriod               // Write DR1
#pragma fastcall16 PWM8_Heater_bReadPulseWidth           // Read  DR2
#pragma fastcall16 PWM8_Heater_WritePulseWidth           // Write DR2

// The following symbols are deprecated.
// They may be omitted in future releases
//
#pragma fastcall16 bPWM8_Heater_ReadCounter              // Read  DR0 (Deprecated)
#pragma fastcall16 bPWM8_Heater_ReadPulseWidth           // Read  DR2 (Deprecated)


//-------------------------------------------------
// Prototypes of the PWM8_Heater API.
//-------------------------------------------------

extern void PWM8_Heater_EnableInt(void);                        // Proxy Class 1
extern void PWM8_Heater_DisableInt(void);                       // Proxy Class 1
extern void PWM8_Heater_Start(void);                            // Proxy Class 1
extern void PWM8_Heater_Stop(void);                             // Proxy Class 1
extern BYTE PWM8_Heater_bReadCounter(void);                     // Proxy Class 2
extern void PWM8_Heater_WritePeriod(BYTE bPeriod);              // Proxy Class 1
extern BYTE PWM8_Heater_bReadPulseWidth(void);                  // Proxy Class 1
extern void PWM8_Heater_WritePulseWidth(BYTE bPulseWidth);      // Proxy Class 1

// The following functions are deprecated.
// They may be omitted in future releases
//
extern BYTE bPWM8_Heater_ReadCounter(void);            // Deprecated
extern BYTE bPWM8_Heater_ReadPulseWidth(void);         // Deprecated


//--------------------------------------------------
// Constants for PWM8_Heater API's.
//--------------------------------------------------

#define PWM8_Heater_CONTROL_REG_START_BIT      ( 0x01 )
#define PWM8_Heater_INT_REG_ADDR               ( 0x0e1 )
#define PWM8_Heater_INT_MASK                   ( 0x02 )


//--------------------------------------------------
// Constants for PWM8_Heater user defined values
//--------------------------------------------------

#define PWM8_Heater_PERIOD                     ( 0xff )
#define PWM8_Heater_PULSE_WIDTH                ( 0x00 )


//-------------------------------------------------
// Register Addresses for PWM8_Heater
//-------------------------------------------------

#pragma ioport  PWM8_Heater_COUNTER_REG:    0x024          //DR0 Count register
BYTE            PWM8_Heater_COUNTER_REG;
#pragma ioport  PWM8_Heater_PERIOD_REG: 0x025              //DR1 Period register
BYTE            PWM8_Heater_PERIOD_REG;
#pragma ioport  PWM8_Heater_COMPARE_REG:    0x026          //DR2 Compare register
BYTE            PWM8_Heater_COMPARE_REG;
#pragma ioport  PWM8_Heater_CONTROL_REG:    0x027          //Control register
BYTE            PWM8_Heater_CONTROL_REG;
#pragma ioport  PWM8_Heater_FUNC_REG:   0x124              //Function register
BYTE            PWM8_Heater_FUNC_REG;
#pragma ioport  PWM8_Heater_INPUT_REG:  0x125              //Input register
BYTE            PWM8_Heater_INPUT_REG;
#pragma ioport  PWM8_Heater_OUTPUT_REG: 0x126              //Output register
BYTE            PWM8_Heater_OUTPUT_REG;
#pragma ioport  PWM8_Heater_INT_REG:       0x0e1           //Interrupt Mask Register
BYTE            PWM8_Heater_INT_REG;


//-------------------------------------------------
// PWM8_Heater Macro 'Functions'
//-------------------------------------------------

#define PWM8_Heater_Start_M \
   PWM8_Heater_CONTROL_REG |=  PWM8_Heater_CONTROL_REG_START_BIT

#define PWM8_Heater_Stop_M  \
   PWM8_Heater_CONTROL_REG &= ~PWM8_Heater_CONTROL_REG_START_BIT

#define PWM8_Heater_EnableInt_M   \
   M8C_EnableIntMask(PWM8_Heater_INT_REG, PWM8_Heater_INT_MASK)

#define PWM8_Heater_DisableInt_M  \
   M8C_DisableIntMask(PWM8_Heater_INT_REG, PWM8_Heater_INT_MASK)

#endif
// end of file PWM8_Heater.h
