;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME:   INSAMP.asm
;;  Version: 2.2, Updated on 2012/9/21 at 11:59:7
;;  Generated by PSoC Designer 5.3.2710
;;
;;  DESCRIPTION:
;;    Assembler source code for a two-OpAmp Instrumentation Amplifier
;;    topology in the 25/26xxx family of PSoC devices
;;
;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API functions
;;        returns. For Large Memory Model devices it is also the caller's 
;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
;;        MVW_PP registers. Even though some of these registers may not be modified
;;        now, there is no guarantee that will remain the case in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
include "INSAMP.inc"

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------

export  INSAMP_Start
export _INSAMP_Start
export  INSAMP_SetPower
export _INSAMP_SetPower

export  INSAMP_SetGain
export _INSAMP_SetGain

export  INSAMP_Stop
export _INSAMP_Stop


AREA bss (RAM,REL)

;-----------------------------------------------
;  Constant Definitions
;-----------------------------------------------

POWERMASK:                     equ 0x03    ; Power field mask for CR2
GAINMASK:                      equ F0h     ; Gain field mask for CR0


;-----------------------------------------------
; Variable Allocation
;-----------------------------------------------


AREA UserModules (ROM, REL)

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: INSAMP_Start
;  FUNCTION NAME: INSAMP_Setpower
;
;  DESCRIPTION:
;    Sets power to the analog blocks used in this module. All three blocks
;    are set to the same power setting (which should be the same as the
;    analog reference power global parameter for best operation!). Constants
;    for proper values are defined in asm and C interface files.
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    fastcall16 BYTE bPowerSetting in the A register
;  RETURNS:      Nothing
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 INSAMP_Start:
_INSAMP_Start:
 INSAMP_SetPower:
_INSAMP_SetPower:
    RAM_PROLOGUE RAM_USE_CLASS_2

    and  A, POWERMASK                         ; mask A to protect unchanged bits
    mov  X, SP                                ; define temp store location

    push A                                    ; put power value in temp store
    mov  A, reg[INSAMP_INV_CR2]     ; read power value
    and  A, ~POWERMASK                        ; clear power bits in A
    or   A, [X]                               ; combine power value with balance of reg.
    mov  reg[INSAMP_INV_CR2], A

    mov  A, reg[INSAMP_NON_INV_CR2] ; read power value
    and  A, ~POWERMASK                        ; clear power bits in A
    or   A, [X]                               ; combine power value with balance of reg.
    mov  reg[INSAMP_NON_INV_CR2], A
    pop  A
    RAM_EPILOGUE RAM_USE_CLASS_2
    ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: INSAMP_SetGain
;
;  DESCRIPTION:
;    Applies gain set values to the module's PSoC blocks
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    fastcall16 BYTE bGain in the A register
;  RETURNS:      Nothing
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
;  THEORY of OPERATION or PROCEDURE:
;    The A register contains the gain setting per values in .inc file.
;    Values in range of 00h to 07h, upper 4 bits only.
;    Gain value applied to NON_INV block.
;    Difference (E0h-gain value) applied to _INV block.
;
 INSAMP_SetGain:
_INSAMP_SetGain:
    RAM_PROLOGUE RAM_USE_CLASS_2 
    and  A, GAINMASK                          ; mask A to protect unchanged bits
    mov  X, SP                                ; set base address for local variable

    push A
    mov  A, reg[INSAMP_NON_INV_CR0] ; read gain value
    and  A, ~GAINMASK                         ; clear gain bits in A
    or   A, [X]                               ; combine gain value with balance of reg.
    mov  reg[INSAMP_NON_INV_CR0], A

    mov  A, E0h                               ; load gain complement value
    sub  a, [X]                               ; calculate gain value for -INV block
    push A
    mov  A, reg[INSAMP_INV_CR0]     ; read gain complement value
    and  A, ~GAINMASK                         ; clear gain bits in A
    or   A, [X+1]                             ; combine gain value with balance of reg.
    mov  reg[INSAMP_INV_CR0], A
    pop  A
    pop  A
    RAM_EPILOGUE RAM_USE_CLASS_2
    ret


.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: INSAMP_Stop
;
;  DESCRIPTION: Turns off power to the two CT blocks
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    None
;  RETURNS:      Nothing
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 INSAMP_Stop:
_INSAMP_Stop:
    RAM_PROLOGUE RAM_USE_CLASS_1
    and  reg[INSAMP_NON_INV_CR2], ~POWERMASK
    and  reg[INSAMP_INV_CR2], ~POWERMASK
    RAM_EPILOGUE RAM_USE_CLASS_1
    ret

.ENDSECTION

; End of File INSAMP.asm
